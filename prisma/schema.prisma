generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id              String            @id @default(uuid())
  name            String            @unique
  brand           String
  isFeatured      Boolean
  isTrending      Boolean
  images          String[]
  price           Decimal
  productCategory ProductCategory[]
  productsInOrders ProductsInOrders[]
}

model Category {
  id              String            @id @default(uuid())
  name            String            @unique
  productCategory ProductCategory[]
}

model ProductCategory {
  categoryId String
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model ProductsInOrders {
  productId String
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([productId, orderId])
}

model Order {
  id String @id @default(uuid())
  userId String
  user User @relation(fields:[userId], references: [id])
  ProductsInOrders ProductsInOrders[]
}

// PrismaAdapter models for Auth.js
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}